#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è WIX —Ñ–æ—Ä—É–º–∞ Fishery Group
"""

import asyncio
import json
import logging
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime

from playwright.async_api import async_playwright, Page, Browser
import yaml
from tqdm import tqdm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/parser.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


class WixForumParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ WIX —Ñ–æ—Ä—É–º–∞"""
    
    def __init__(self, config_path: str = "config/wix_config.yaml"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.config = self._load_config(config_path)
        self.browser: Optional[Browser] = None
        self.page: Optional[Page] = None
        
        # –î–∞–Ω–Ω—ã–µ
        self.categories: List[Dict] = []
        self.subcategories: List[Dict] = []
        self.posts: List[Dict] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'categories_parsed': 0,
            'subcategories_parsed': 0,
            'posts_parsed': 0,
            'comments_parsed': 0,
            'files_downloaded': 0,
            'errors_count': 0
        }
        
    def _load_config(self, config_path: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML"""
        # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        Path('logs').mkdir(parents=True, exist_ok=True)
        
        with open(config_path, 'r', encoding='utf-8') as f:
            return yaml.safe_load(f)
        
    async def initialize_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ Playwright"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        playwright = await async_playwright().start()
        
        self.browser = await playwright.chromium.launch(
            headless=self.config['parsing']['headless']
        )
        
        context = await self.browser.new_context(
            user_agent=self.config['parsing']['user_agent']
        )
        
        self.page = await context.new_page()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–∞—É—Ç
        self.page.set_default_timeout(
            self.config['parsing']['page_load_timeout'] * 1000
        )
        
        logger.info("–ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Ñ–æ—Ä—É–º–µ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)"""
        auth_config = self.config.get('auth', {})
        
        if not auth_config.get('required', False):
            logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
            
        logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        # –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        await self.page.goto(self.config['forum_url'])
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        # –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ HTML —Ñ–æ—Ä—É–º–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
        
        # –ü—Ä–∏–º–µ—Ä:
        # await self.page.click('text="Log In"')
        # await self.page.fill('input[name="username"]', auth_config['username'])
        # await self.page.fill('input[name="password"]', auth_config['password'])
        # await self.page.click('button[type="submit"]')
        # await self.page.wait_for_load_state('networkidle')
        
        logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
    async def parse_categories(self) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ–æ—Ä—É–º–∞
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        logger.info("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        
        try:
            await self.page.goto(self.config['forum_url'])
            await self.page.wait_for_load_state('networkidle')
            
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            # –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            
            categories = []
            
            # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏:
            # category_elements = await self.page.query_selector_all(
            #     self.config['selectors']['category_item']
            # )
            # 
            # for idx, elem in enumerate(category_elements):
            #     title = await elem.inner_text()
            #     url = await elem.get_attribute('href')
            #     
            #     category = {
            #         'id': idx + 1,
            #         'title': title.strip(),
            #         'url': url,
            #         'subcategories': []
            #     }
            #     
            #     categories.append(category)
            #     self.stats['categories_parsed'] += 1
            
            logger.info(f"‚úì –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
            self.categories = categories
            
            return categories
            
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            self.stats['errors_count'] += 1
            raise
    
    async def parse_subcategories(self, category: Dict) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            category: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è: {category['title']}")
        
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
            
            subcategories = []
            
            self.stats['subcategories_parsed'] += len(subcategories)
            
            return subcategories
            
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π {category['title']}: {e}")
            self.stats['errors_count'] += 1
            return []
    
    async def parse_posts(self, subcategory: Dict) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            subcategory: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
        """
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –≤: {subcategory['title']}")
        
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–æ–≤
            
            posts = []
            
            self.stats['posts_parsed'] += len(posts)
            
            return posts
            
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ—Å—Ç–æ–≤ –≤ {subcategory['title']}: {e}")
            self.stats['errors_count'] += 1
            return []
    
    async def parse_post_details(self, post_url: str) -> Dict:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        
        Args:
            post_url: URL –ø–æ—Å—Ç–∞
            
        Returns:
            –î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
        """
        logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–∞: {post_url}")
        
        await self.page.goto(post_url)
        await self.page.wait_for_load_state('networkidle')
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞
        
        post_details = {
            'url': post_url,
            'title': '',
            'author': '',
            'created_at': '',
            'content': '',
            'attachments': [],
            'comments': []
        }
        
        return post_details
    
    async def parse_attachments(self, post_element) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –≤–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å—Ç–∞
        
        Args:
            post_element: Playwright —ç–ª–µ–º–µ–Ω—Ç —Å –ø–æ—Å—Ç–æ–º
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–ª–æ–∂–µ–Ω–∏–π —Å URL
        """
        attachments = []
        
        # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ —Å –∫–ª–∞—Å—Å–æ–º PaFuZ
        attachment_links = await post_element.query_selector_all(
            self.config['selectors']['attachment_link']
        )
        
        for link in attachment_links:
            href = await link.get_attribute('href')
            filename = await link.inner_text()
            
            if href:
                attachments.append({
                    'filename': filename.strip(),
                    'url': href,
                    'downloaded': False,
                    'local_path': None
                })
        
        return attachments
    
    async def run_full_parse(self):
        """–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä—É–º–∞"""
        logger.info("=" * 80)
        logger.info("üöÄ –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê –§–û–†–£–ú–ê")
        logger.info("=" * 80)
        
        start_time = datetime.now()
        
        try:
            await self.initialize_browser()
            await self.login()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories = await self.parse_categories()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            logger.info(f"\nüìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
            
            for category in tqdm(categories, desc="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", unit="cat"):
                # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
                subcategories = await self.parse_subcategories(category)
                category['subcategories'] = subcategories
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if subcategories:
                    logger.info(f"\n  üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ '{category['title']}'...")
                    
                    for subcategory in tqdm(subcategories, desc=f"  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", leave=False):
                        posts = await self.parse_posts(subcategory)
                        subcategory['posts'] = posts
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤
                        if posts:
                            for post in tqdm(posts, desc=f"    –ü–æ—Å—Ç—ã", leave=False):
                                # –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –≤–ª–æ–∂–µ–Ω–∏—è)
                                # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
                                pass
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await asyncio.sleep(
                            self.config['parsing']['delay_between_requests']
                        )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.save_results()
            
            # –ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            end_time = datetime.now()
            duration = end_time - start_time
            
            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._print_statistics(duration)
            
            logger.info("=" * 80)
            logger.info("‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
            logger.info("=" * 80)
            
        except Exception as e:
            logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            self.stats['errors_count'] += 1
            raise
            
        finally:
            if self.browser:
                await self.browser.close()
    
    def _print_statistics(self, duration):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        logger.info("\n" + "=" * 80)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê")
        logger.info("=" * 80)
        logger.info(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:     {self.stats['categories_parsed']}")
        logger.info(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:  {self.stats['subcategories_parsed']}")
        logger.info(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:        {self.stats['posts_parsed']}")
        logger.info(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:  {self.stats['comments_parsed']}")
        logger.info(f"‚úì –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:           {self.stats['files_downloaded']}")
        logger.info(f"‚ö† –û—à–∏–±–æ–∫:                   {self.stats['errors_count']}")
        logger.info(f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:         {duration}")
        logger.info("=" * 80 + "\n")
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
        output_dir = Path(self.config['export']['output_dir'])
        output_dir.mkdir(parents=True, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–æ—Ä—É–º–∞
        structure_file = output_dir / f"forum_structure_{timestamp}.json"
        
        data = {
            'export_date': datetime.now().isoformat(),
            'forum_url': self.config['forum_url'],
            'categories': self.categories,
            'statistics': self.stats,
            'summary': {
                'total_categories': len(self.categories),
                'total_subcategories': sum(
                    len(cat.get('subcategories', [])) 
                    for cat in self.categories
                ),
                'total_posts': sum(
                    len(subcat.get('posts', []))
                    for cat in self.categories
                    for subcat in cat.get('subcategories', [])
                )
            }
        }
        
        with open(structure_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {structure_file}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = WixForumParser()
    await parser.run_full_parse()


if __name__ == "__main__":
    asyncio.run(main())

